{"version":3,"sources":["components/user/Picture.js","components/user/UserGalleryPage.js"],"names":["Picture","props","imageClass","userService","getImageSize","imageUrl","isRoot","isTheCurrentLoggedInUser","userId","getUserId","react_default","a","createElement","id","className","src","alt","onClick","removePhoto","bind","UserGalleryPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","uploadFile","event","setState","error","msg","state","file","size","toast","common","errorToast","text","position","POSITION","TOP_RIGHT","data","FormData","append","console","log","fetch","method","headers","objectSpread","getAuthHeader","body","then","json","response","success","successToast","message","loadAllPictures","ready","catch","err","concat","status","localStorage","clear","history","push","token","getItem","length","Authorization","photoToRemoveId","preventDefault","requestBody","loggedInUserId","requester","post","onFileChange","target","files","picturesArr","match","params","firstName","lastName","username","assertThisInitialized","_this2","getUserToShowId","htmlFor","onChange","type","react","map","picture","user_Picture","assign","key","Component"],"mappings":"uNAyBeA,EAtBC,SAACC,GACb,IAAMC,EAAaC,IAAYC,aAAaH,EAAMI,UAC5CC,EAASH,IAAYG,SACrBC,EAA4BN,EAAMO,SAAWL,IAAYM,YAE/D,OAEIC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACJH,EAAAC,EAAAC,cAAA,WAASE,UAAU,QAAQD,GAAG,aAC1BH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWZ,EAAYa,IAAKd,EAAMI,SAAUW,IAAI,UAEzDN,EAAAC,EAAAC,cAAA,OAAMK,QAAShB,EAAMiB,YAAYC,YAAWlB,EAAMY,MAChDP,GAAWC,IAA8BG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gEAAgEJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,6ECVtIM,cACjB,SAAAA,EAAYnB,GAAO,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvB,KAyBV2B,WAAa,SAACC,GAIV,GAFAR,EAAKS,SAAS,CAAEC,MAAO,GAAIC,IAAK,KAE3BX,EAAKY,MAAMC,KAOhB,GAAIb,EAAKY,MAAMC,KAAKC,MAAQ,IACxBC,QAAML,MAAMrB,EAAAC,EAAAC,cAACyB,EAAA,EAAeC,WAAhB,CAA2BC,KAAK,oCAAsC,CAC9EC,SAAUJ,QAAMK,SAASC,gBAFjC,CAOA,IAAIC,EAAO,IAAIC,SACfD,EAAKE,OAAO,OAAQxB,EAAKY,MAAMC,MAC/BS,EAAKE,OAAO,iBAAkBxB,EAAKY,MAAMpB,IACzCiC,QAAQC,IAAI,iBAAkB1B,EAAKY,MAAMpB,IAEzCmC,MAAM,uDAAwD,CAC1DC,OAAQ,OACRC,QAAQ5B,OAAA6B,EAAA,EAAA7B,CAAA,GACDD,EAAK+B,iBAEZC,KAAMV,IACPW,KAAK,SAAAX,GAAI,OAAIA,EAAKY,SAChBD,KAAK,SAAAE,IACuB,IAArBA,EAASC,SACTrB,QAAMqB,QAAQ/C,EAAAC,EAAAC,cAACyB,EAAA,EAAeqB,aAAhB,CAA6BnB,KAAMiB,EAASG,UAAa,CACnEnB,SAAUJ,QAAMK,SAASC,YAI7BrB,EAAKpB,MAAM2D,gBAAgBvC,EAAKpB,MAAMY,IAEtCQ,EAAKS,SAAS,CAAE+B,OAAO,KAGvBzB,QAAML,MAAMrB,EAAAC,EAAAC,cAACyB,EAAA,EAAeC,WAAhB,CAA2BC,KAAMiB,EAASG,UAAa,CAC/DnB,SAAUJ,QAAMK,SAASC,cAIlCoB,MAAM,SAAAC,GACLjB,QAAQf,MAAM,kBAAmBgC,GACjC3B,QAAML,MAAMrB,EAAAC,EAAAC,cAACyB,EAAA,EAAeC,WAAhB,CAA2BC,KAAI,0BAAAyB,OAA4BD,EAAIJ,WAAe,CACtFnB,SAAUJ,QAAMK,SAASC,YAGV,MAAfqB,EAAIE,QAAkC,8CAAhBF,EAAIJ,UAC1BO,aAAaC,QACb9C,EAAKpB,MAAMmE,QAAQC,KAAK,kBAlDhCjC,QAAML,MAAMrB,EAAAC,EAAAC,cAACyB,EAAA,EAAeC,WAAhB,CAA2BC,KAAK,0BAA4B,CACpEC,SAAUJ,QAAMK,SAASC,aAhClBrB,EAuFnB+B,cAAgB,WACZ,IAAMkB,EAAQJ,aAAaK,QAAQ,SACnC,OAAQD,GAASA,EAAME,OACjB,CAAEC,cAAA,UAAAT,OAA2BM,IAC7B,IA3FSjD,EA8FnBH,YAAc,SAACwD,EAAiB7C,GAC5BA,EAAM8C,iBACN,IAAMC,EAAc,CAAEC,eAAgB1E,IAAYM,YAAaiE,gBAAiBA,GAEhF5B,QAAQC,IAAI,gBAAiB6B,GAE7BE,IAAUC,KAAK,mBAAoBH,EAAa,SAACpB,GAC7CV,QAAQC,IAAI,2BAA4BS,GAEpCA,EAASC,SACTrB,QAAMqB,QAAQ/C,EAAAC,EAAAC,cAACyB,EAAA,EAAeqB,aAAhB,CAA6BnB,KAAMiB,EAASG,UAAa,CACnEnB,SAAUJ,QAAMK,SAASC,YAG7BrB,EAAKpB,MAAM2D,gBAAgBvC,EAAKpB,MAAMY,MAGtCiC,QAAQC,IAAI,kBAAmBS,EAASG,SACxCvB,QAAML,MAAMrB,EAAAC,EAAAC,cAACyB,EAAA,EAAeC,WAAhB,CAA2BC,KAAMiB,EAASG,UAAa,CAC/DnB,SAAUJ,QAAMK,SAASC,eAGlCoB,MAAM,SAAAC,GAELjB,QAAQf,MAAM,sBAAuBgC,GACrC3B,QAAML,MAAMrB,EAAAC,EAAAC,cAACyB,EAAA,EAAeC,WAAhB,CAA2BC,KAAI,0BAAAyB,OAA4BD,EAAIJ,WAAe,CACtFnB,SAAUJ,QAAMK,SAASC,YAGV,MAAfqB,EAAIE,QAAkC,8CAAhBF,EAAIJ,UAC1BO,aAAaC,QACb9C,EAAKpB,MAAMmE,QAAQC,KAAK,cA7HjBhD,EAkInB2D,aAAe,SAACnD,GAEZR,EAAKS,SAAS,CACVI,KAAML,EAAMoD,OAAOC,MAAM,GACzBrB,OAAO,GACR,kBAAMxC,EAAKO,gBApIdP,EAAKY,MAAQ,CACTkD,YAAa,GACbtE,GAAIQ,EAAKpB,MAAMmF,MAAMC,OAAOxE,GAC5ByE,UAAWjE,EAAKpB,MAAMqF,UACtBC,SAAUlE,EAAKpB,MAAMsF,SACrBC,SAAU,GACVtD,KAAM,GACNH,MAAO,GACPC,IAAK,GACL6B,OAAO,GAGXxC,EAAKO,WAAaP,EAAKO,WAAWT,KAAhBG,OAAAmE,EAAA,EAAAnE,QAAAmE,EAAA,EAAAnE,CAAAD,KAClBA,EAAK2D,aAAe3D,EAAK2D,aAAa7D,KAAlBG,OAAAmE,EAAA,EAAAnE,QAAAmE,EAAA,EAAAnE,CAAAD,KACpBA,EAAKH,YAAcG,EAAKH,YAAYC,KAAjBG,OAAAmE,EAAA,EAAAnE,QAAAmE,EAAA,EAAAnE,CAAAD,KAjBJA,mFAqBf,IAAMb,EAASgB,KAAKvB,MAAMmF,MAAMC,OAAOxE,GACvCW,KAAKM,SAAS,CAAEjB,GAAIL,IACpBgB,KAAKvB,MAAM2D,gBAAgBpD,oCAmHtB,IAAAkF,EAAAlE,KAKL,GAJGA,KAAKvB,MAAMmF,MAAMC,OAAOxE,KAAOW,KAAKvB,MAAMY,IACzCW,KAAKvB,MAAM0F,gBAAgBnE,KAAKvB,MAAMmF,MAAMC,OAAOxE,KAGlDW,KAAKS,MAAM4B,MACZ,OAAOnD,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAd,qBAGX,IAAMR,EAASH,IAAYG,SACrBC,EAA4BiB,KAAKvB,MAAMY,KAAOV,IAAYM,YAEhE,OACIC,EAAAC,EAAAC,cAAA,WAASE,UAAU,mBACfJ,EAAAC,EAAAC,cAAA,WAASE,UAAU,wBACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gCACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACXJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBAEjBJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uBAAd,YAGDR,GAAWC,IAAgCG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,IAGzDJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,sBACdJ,EAAAC,EAAAC,cAAA,SAAOC,GAAG,SAAS+E,QAAQ,cAA3B,cACAlF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,aAAagF,SAAUrE,KAAKwD,aAAcc,KAAK,YAKpEtE,KAAKvB,MAAMkF,YAAYX,OAAS,EAE7B9D,EAAAC,EAAAC,cAACmF,EAAA,SAAD,KACIrF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,qCACdJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAETU,KAAKvB,MAAMkF,YAAYa,IAAI,SAACC,GAAD,OAAavF,EAAAC,EAAAC,cAACsF,EAAD5E,OAAA6E,OAAA,CAASC,IAAKH,EAAQpF,GAAIK,YAAawE,EAAKxE,aAAkB+E,EAA9D,CAAuEzF,OAAQkF,EAAKzF,MAAMY,UAI3IH,EAAAC,EAAAC,cAACmF,EAAA,SAAD,KACIrF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,qCACdJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAd,0BAAmDJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,oBAAhB,GAAAkD,OAAuCxC,KAAKvB,MAAMqF,UAAlD,KAAAtB,OAA+DxC,KAAKvB,MAAMsF,WAA7H,KACA7E,EAAAC,EAAAC,cAAA,MAAIE,UAAU,+CAzLGuF","file":"static/js/12.ac690f6f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { userService } from '../../infrastructure'\r\n\r\nconst Picture = (props) => {\r\n    const imageClass = userService.getImageSize(props.imageUrl);\r\n    const isRoot = userService.isRoot();\r\n    const isTheCurrentLoggedInUser = (props.userId === userService.getUserId());\r\n\r\n    return (\r\n\r\n        <li>\r\n            <div id=\"container\">\r\n                <article className=\"card \" id=\"contauner\">\r\n                    <div className=\"media\">\r\n                        <img className={imageClass} src={props.imageUrl} alt=\"pic1\" />\r\n                    </div>\r\n                    <div  onClick={props.removePhoto.bind(this, props.id)}>\r\n                   { (isRoot ||  isTheCurrentLoggedInUser) &&  <div className=\"btn fbPhotoCurationControl inner uiButtonGroup delete-button\" ><i className=\"far fa-trash-alt \"></i></div>} \r\n                    </div>\r\n                </article>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Picture","import React, { Component, Fragment } from 'react';\r\nimport { requester, userService } from '../../infrastructure'\r\nimport { toast } from 'react-toastify';\r\nimport { ToastComponent } from '../common'\r\nimport Picture from './Picture';\r\nimport './css/UserGallery.css'\r\n\r\nexport default class UserGalleryPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            picturesArr: [],\r\n            id: this.props.match.params.id,\r\n            firstName: this.props.firstName,\r\n            lastName: this.props.lastName,\r\n            username: '',\r\n            file: '',\r\n            error: '',\r\n            msg: '',\r\n            ready: true,\r\n        };\r\n\r\n        this.uploadFile = this.uploadFile.bind(this);\r\n        this.onFileChange = this.onFileChange.bind(this);\r\n        this.removePhoto = this.removePhoto.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.id;\r\n        this.setState({ id: userId });\r\n        this.props.loadAllPictures(userId);\r\n    }\r\n   \r\n    uploadFile = (event) => {\r\n        debugger;\r\n        this.setState({ error: '', msg: '' });\r\n\r\n        if (!this.state.file) {\r\n            toast.error(<ToastComponent.errorToast text='Please upload a file.' />, {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (this.state.file.size >= 2000000) {\r\n            toast.error(<ToastComponent.errorToast text='File size exceeds limit of 2MB.' />, {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            return;\r\n        }\r\n\r\n        let data = new FormData();\r\n        data.append('file', this.state.file);\r\n        data.append('loggedInUserId', this.state.id);\r\n        console.log('loggedInUserId', this.state.id);\r\n        debugger;\r\n        fetch('https://kl-social-network.herokuapp.com/pictures/add', {\r\n            method: 'POST',\r\n            headers: {\r\n                ...this.getAuthHeader()\r\n            },\r\n            body: data\r\n        }).then(data => data.json())\r\n            .then(response => {\r\n                if (response.success === true) {\r\n                    toast.success(<ToastComponent.successToast text={response.message} />, {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n\r\n                    debugger;\r\n                    this.props.loadAllPictures(this.props.id);\r\n\r\n                    this.setState({ ready: true });\r\n                    // this.loadAllPictures()\r\n                } else {\r\n                    toast.error(<ToastComponent.errorToast text={response.message} />, {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                }\r\n\r\n            }).catch(err => {\r\n                console.error('Upload Pic Err:', err)\r\n                toast.error(<ToastComponent.errorToast text={`Internal Server Error: ${err.message}`} />, {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n\r\n                if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                    localStorage.clear();\r\n                    this.props.history.push('/login');\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    getAuthHeader = () => {\r\n        const token = localStorage.getItem(\"token\");\r\n        return (token && token.length)\r\n            ? { 'Authorization': `Bearer ${token}` }\r\n            : {}\r\n    }\r\n\r\n    removePhoto = (photoToRemoveId, event) => {\r\n        event.preventDefault();\r\n        const requestBody = { loggedInUserId: userService.getUserId(), photoToRemoveId: photoToRemoveId }\r\n\r\n        console.log('requestBody: ', requestBody)\r\n        debugger;\r\n        requester.post('/pictures/remove', requestBody, (response) => {\r\n            console.log('RemovePicture response: ', response)\r\n            debugger;\r\n            if (response.success) {\r\n                toast.success(<ToastComponent.successToast text={response.message} />, {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n\r\n                this.props.loadAllPictures(this.props.id);\r\n            } else {\r\n                debugger;\r\n                console.log('error message: ', response.message);\r\n                toast.error(<ToastComponent.errorToast text={response.message} />, {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            debugger;\r\n            console.error('Remove Picture err:', err)\r\n            toast.error(<ToastComponent.errorToast text={`Internal Server Error: ${err.message}`} />, {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n\r\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                localStorage.clear();\r\n                this.props.history.push('/login');\r\n            }\r\n        })\r\n    }\r\n\r\n    onFileChange = (event) => {\r\n        debugger;\r\n        this.setState({\r\n            file: event.target.files[0],\r\n            ready: false\r\n        }, () => this.uploadFile());\r\n    }\r\n\r\n    render() {\r\n        if(this.props.match.params.id !== this.props.id){\r\n            this.props.getUserToShowId(this.props.match.params.id);\r\n        }\r\n\r\n        if (!this.state.ready) {\r\n            return <h1 className=\"text-center pt-5 mt-5\">Uploading File...</h1>\r\n        }\r\n\r\n        const isRoot = userService.isRoot();\r\n        const isTheCurrentLoggedInUser = (this.props.id === userService.getUserId());\r\n\r\n        return (\r\n            <section className=\"galerry-section\">\r\n                <article className=\"aside-article-photos\">\r\n                    <div className=\"gallery-article-intro\">\r\n                        <div className=\"gallery-aside-article-header\"  >\r\n                            <div className=\"aside-article-icon\">\r\n                                <i className=\"fas fa-images\"></i>\r\n                            </div>\r\n                            <h3 className=\"aside-article-title\">Photos</h3>\r\n                        </div>\r\n\r\n                        { (isRoot ||  isTheCurrentLoggedInUser) &&    <div className=\"\">\r\n                            {/* <h4 style={{ color: 'red' }}>{this.state.error}</h4>\r\n                            <h4 style={{ color: 'green' }}>{this.state.msg}</h4> */}\r\n                            <button className=\"button update-info\" >\r\n                                <label id=\"upload\" htmlFor=\"fileUpload\" > ADD PHOTO</label>\r\n                                <input id=\"fileUpload\" onChange={this.onFileChange} type=\"file\" />\r\n                            </button>\r\n                        </div>}\r\n\r\n                    </div>\r\n                    {this.props.picturesArr.length > 0\r\n                        ?\r\n                        <Fragment>\r\n                            <hr className=\"my-2 mb-4 mt-3 col-md-10 mx-auto\" />\r\n                            <ul className=\"grid-container\">\r\n\r\n                                {this.props.picturesArr.map((picture) => <Picture key={picture.id} removePhoto={this.removePhoto}  {...picture} userId={this.props.id} />)}\r\n                            </ul>\r\n                        </Fragment>\r\n                        :\r\n                        <Fragment>\r\n                            <hr className=\"my-2 mb-5 mt-3 col-md-10 mx-auto\" />\r\n                            <h3 className=\"text-center\">There are no photos of <span className=\"username-gallery\">{`${this.props.firstName} ${this.props.lastName}`}</span>.</h3>\r\n                            <hr className=\"my-2 mb-5 mt-3 col-md-10 mx-auto\" />\r\n                        </Fragment>\r\n                    }\r\n                </article>\r\n            </section>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}